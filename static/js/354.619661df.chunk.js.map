{"version":3,"file":"static/js/354.619661df.chunk.js","mappings":"+SAEMA,EAAU,mCACVC,EAAU,+BAEHC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,uCACWH,EADX,+CADQ,cACzBI,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qDAOvB,SAASC,EAAaC,EAAOC,GAClC,OAAOL,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAAqC,CAC1CQ,OAAQ,CACNC,QAASV,EACTO,MAAAA,EACAC,KAAAA,IAGL,CAEM,IAAMG,EAAY,mCAAG,WAAMC,GAAN,uFACHT,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA8BW,IAD3B,cACpBR,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKlB,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,uFACkBT,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA8BW,EAA9B,aADlB,cACCR,EADD,yBAEEA,EAASC,MAFX,kEAKA,IAAMS,EAAe,mCAAG,WAAMF,GAAN,uFACNT,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA8BW,EAA9B,aADM,cACvBR,EADuB,yBAEtBA,EAASC,KAAKU,SAFQ,2CAAH,qD,sFCiD5B,UA7EA,WACE,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACQV,GAAYW,EAAAA,EAAAA,MAAZX,QAkBR,OAfAY,EAAAA,EAAAA,YAAU,WACRF,GAAW,IACXX,EAAAA,EAAAA,IAAaC,GACVa,MAAK,SAAArB,GACJc,EAASd,GACTgB,EAAS,KACV,IACAM,OAAM,SAAAP,GACLC,EAAS,uBACV,IACAO,SAAQ,WACPL,GAAW,EACZ,GACJ,GAAE,CAACV,KAGF,4BACE,SAAC,KAAD,CAAMgB,GAnBO,IAmBb,qBACCT,IAAS,yBAAMA,IACfE,GAAW,cACXJ,IACC,4BACE,gBACEY,IACEZ,EAAMa,YAAN,0CACuCb,EAAMa,aACzC,6EAENC,IAAKd,EAAMe,MACXC,MAAM,MACNC,OAAO,SAGT,wBAAKjB,EAAMe,SACX,wCAAgBG,KAAKC,MAA2B,GAArBnB,EAAMoB,cAAjC,SACA,4BACE,sCACA,uBAAIpB,EAAMqB,eAEZ,4BACE,oCACA,yBACGrB,EAAMsB,OAAOC,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GACzB,OAAO,uBAAaD,GAALC,EAChB,aAKT,4BACE,2BACE,yBACE,SAAC,KAAD,CAAMd,GAAE,OAAUe,MAAO,CAAEC,KAtDpB,KAsDP,qBAIF,yBACE,SAAC,KAAD,CAAMhB,GAAE,UAAae,MAAO,CAAEC,KA3DvB,KA2DP,2BAKJ,SAAC,EAAAC,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,WAKT,C","sources":["Service/MovieAPI.js","components/MovieDetails/MovieDetails.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '7a96b7d3f2fd15994813e6eeb1d3cb9e';\nconst baseUrl = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `/trending/movie/week?api_key=${API_KEY}&page=1&language=en-US&include_adult=false`\n  );\n  return response.data;\n};\n\nexport function searchMovies(query, page) {\n  return axios.get(`${baseUrl}/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query,\n      page,\n    },\n  });\n}\n\nexport const getMovieInfo = async movieId => {\n  const response = await axios.get(`${baseUrl}/movie/${movieId}`);\n  return response.data;\n};\n\nexport async function getMovieCredits(movieId) {\n  const response = await axios.get(`${baseUrl}/movie/${movieId}/credits`);\n  return response.data;\n}\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(`${baseUrl}/movie/${movieId}/reviews`);\n  return response.data.results;\n};\n","import React, { useEffect, useState, Suspense } from 'react';\nimport { useParams, Link, Outlet } from 'react-router-dom';\nimport { getMovieInfo } from 'Service/MovieAPI';\n\nfunction MovieDetails() {\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  const backLink = '/';\n\n  useEffect(() => {\n    setLoading(true);\n    getMovieInfo(movieId)\n      .then(response => {\n        setMovie(response);\n        setError(null);\n      })\n      .catch(error => {\n        setError('Something went wrong');\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <div>\n      <Link to={backLink}>Go back</Link>\n      {error && <div>{error}</div>}\n      {loading && 'Loading ...'}\n      {movie && (\n        <div>\n          <img\n            src={\n              movie.poster_path\n                ? `https://image.tmdb.org/t/p/w200/${movie.poster_path}`\n                : 'https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg'\n            }\n            alt={movie.title}\n            width=\"200\"\n            height=\"300\"\n          />\n\n          <h2>{movie.title}</h2>\n          <p>User Score: {Math.round(movie.vote_average * 10)} %</p>\n          <div>\n            <h3>Overview</h3>\n            <p>{movie.overview}</p>\n          </div>\n          <div>\n            <h3>Genres</h3>\n            <div>\n              {movie.genres.map(({ name, id }) => {\n                return <p key={id}>{name}</p>;\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n      <div>\n        <ul>\n          <li>\n            <Link to={`cast`} state={{ from: backLink }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to={`reviews`} state={{ from: backLink }}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </div>\n  );\n}\n\nexport default MovieDetails;\n"],"names":["API_KEY","baseUrl","getTrendingMovies","axios","response","data","searchMovies","query","page","params","api_key","getMovieInfo","movieId","getMovieCredits","getMovieReviews","results","useState","movie","setMovie","error","setError","loading","setLoading","useParams","useEffect","then","catch","finally","to","src","poster_path","alt","title","width","height","Math","round","vote_average","overview","genres","map","name","id","state","from","Suspense","fallback"],"sourceRoot":""}