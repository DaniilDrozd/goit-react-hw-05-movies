{"version":3,"file":"static/js/354.61b8089b.chunk.js","mappings":"+SAGAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAJc,mCAKdC,SAAU,SAGL,IAAMC,EAAiB,mCAAG,gGAASC,EAAT,EAASA,KAClCC,EAAS,CACbD,KAAAA,GAF6B,SAIRJ,EAAAA,EAAAA,IAAA,sBAAiC,CAAEK,OAAAA,IAJ3B,cAIzBC,EAJyB,yBAKxBA,EAASC,MALe,2CAAH,sDAQjBC,EAAe,mCAAG,WAAOC,EAAOL,GAAd,gFACvBC,EAAS,CACbI,MAAAA,EACAL,KAAAA,GAH2B,SAKNJ,EAAAA,EAAAA,IAAA,gBAA2B,CAAEK,OAAAA,IALvB,cAKvBC,EALuB,yBAMtBA,EAASC,MANa,2CAAH,wDASfG,EAAY,mCAAG,WAAMC,GAAN,uFACHX,EAAAA,EAAAA,IAAA,iBAAoBW,EAApB,MADG,cACpBL,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZK,EAAe,mCAAG,WAAMD,GAAN,uFACNX,EAAAA,EAAAA,IAAA,iBAAoBW,EAApB,aADM,cACvBL,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfM,EAAe,mCAAG,WAAMF,GAAN,uFACNX,EAAAA,EAAAA,IAAA,iBAAoBW,EAApB,aADM,cACvBL,EADuB,yBAEtBA,EAASC,KAAKO,SAFQ,2CAAH,qD,sFC4C5B,UA7EA,WACE,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACQV,GAAYW,EAAAA,EAAAA,MAAZX,QAkBR,OAfAY,EAAAA,EAAAA,YAAU,WACRF,GAAW,IACXX,EAAAA,EAAAA,IAAaC,GACVa,MAAK,SAAAlB,GACJW,EAASX,GACTa,EAAS,KACV,IACAM,OAAM,SAAAP,GACLC,EAAS,uBACV,IACAO,SAAQ,WACPL,GAAW,EACZ,GACJ,GAAE,CAACV,KAGF,4BACE,SAAC,KAAD,CAAMgB,GAnBO,IAmBb,qBACCT,IAAS,yBAAMA,IACfE,GAAW,cACXJ,IACC,4BACE,gBACEY,IACEZ,EAAMa,YAAN,0CACuCb,EAAMa,aACzC,6EAENC,IAAKd,EAAMe,MACXC,MAAM,MACNC,OAAO,SAGT,wBAAKjB,EAAMe,SACX,wCAAgBG,KAAKC,MAA2B,GAArBnB,EAAMoB,cAAjC,SACA,4BACE,sCACA,uBAAIpB,EAAMqB,eAEZ,4BACE,oCACA,yBACGrB,EAAMsB,OAAOC,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GACzB,OAAO,uBAAaD,GAALC,EAChB,aAKT,4BACE,2BACE,yBACE,SAAC,KAAD,CAAMd,GAAE,OAAUe,MAAO,CAAEC,KAtDpB,KAsDP,qBAIF,yBACE,SAAC,KAAD,CAAMhB,GAAE,UAAae,MAAO,CAAEC,KA3DvB,KA2DP,2BAKJ,SAAC,EAAAC,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,WAKT,C","sources":["Service/MovieAPI.js","components/MovieDetails/MovieDetails.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '7a96b7d3f2fd15994813e6eeb1d3cb9e';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nexport const getTrendingMovies = async ({ page }) => {\n  const params = {\n    page,\n  };\n  const response = await axios.get(`/trending/movie/day`, { params });\n  return response.data;\n};\n\nexport const getSearchMovies = async (query, page) => {\n  const params = {\n    query,\n    page,\n  };\n  const response = await axios.get(`/search/movie`, { params });\n  return response.data;\n};\n\nexport const getMovieInfo = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/`);\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/credits`);\n  return response.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews`);\n  return response.data.results;\n};\n","import React, { useEffect, useState, Suspense } from 'react';\nimport { useParams, Link, Outlet } from 'react-router-dom';\nimport { getMovieInfo } from 'Service/MovieAPI';\n\nfunction MovieDetails() {\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  const backLink = '/';\n\n  useEffect(() => {\n    setLoading(true);\n    getMovieInfo(movieId)\n      .then(response => {\n        setMovie(response);\n        setError(null);\n      })\n      .catch(error => {\n        setError('Something went wrong');\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <div>\n      <Link to={backLink}>Go back</Link>\n      {error && <div>{error}</div>}\n      {loading && 'Loading ...'}\n      {movie && (\n        <div>\n          <img\n            src={\n              movie.poster_path\n                ? `https://image.tmdb.org/t/p/w200/${movie.poster_path}`\n                : 'https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg'\n            }\n            alt={movie.title}\n            width=\"200\"\n            height=\"300\"\n          />\n\n          <h2>{movie.title}</h2>\n          <p>User Score: {Math.round(movie.vote_average * 10)} %</p>\n          <div>\n            <h3>Overview</h3>\n            <p>{movie.overview}</p>\n          </div>\n          <div>\n            <h3>Genres</h3>\n            <div>\n              {movie.genres.map(({ name, id }) => {\n                return <p key={id}>{name}</p>;\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n      <div>\n        <ul>\n          <li>\n            <Link to={`cast`} state={{ from: backLink }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to={`reviews`} state={{ from: backLink }}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </div>\n  );\n}\n\nexport default MovieDetails;\n"],"names":["axios","api_key","language","getTrendingMovies","page","params","response","data","getSearchMovies","query","getMovieInfo","movieId","getMovieCredits","getMovieReviews","results","useState","movie","setMovie","error","setError","loading","setLoading","useParams","useEffect","then","catch","finally","to","src","poster_path","alt","title","width","height","Math","round","vote_average","overview","genres","map","name","id","state","from","Suspense","fallback"],"sourceRoot":""}