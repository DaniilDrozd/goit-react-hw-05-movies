{"version":3,"file":"static/js/785.72810e3b.chunk.js","mappings":"yNA8CA,UA1CgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAqBF,EAAAA,EAAAA,UAAS,MAArBG,GAAT,eACA,GAAuBH,EAAAA,EAAAA,WAAS,GAAvBI,GAAT,eAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,2FACdF,GAAW,GADG,mBAIWG,EAAAA,EAAAA,IAAgBT,GAJ3B,OAINU,EAJM,OAKZN,EAAWM,GACXL,EAAS,MANG,gDAQZM,QAAQC,MAAR,MARY,yBAUZN,GAAW,GAVC,4EAAH,qDAcbE,GACD,GAAE,CAACR,KAGF,yBACGG,GAAWA,EAAQU,OAAS,GAC3B,wBACGV,EAAQW,KAAI,SAAAC,GAAM,OACjB,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAOG,GADC,OAQrB,kDAIP,C,+LCzCDC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAJc,mCAKdC,SAAU,SAGL,IAAMC,EAAiB,mCAAG,gGAASC,EAAT,EAASA,KAClCC,EAAS,CACbD,KAAAA,GAF6B,SAIRJ,EAAAA,EAAAA,IAAA,sBAAiC,CAAEK,OAAAA,IAJ3B,cAIzBd,EAJyB,yBAKxBA,EAASe,MALe,2CAAH,sDAQjBC,EAAe,mCAAG,WAAOC,EAAOJ,GAAd,gFACvBC,EAAS,CACbG,MAAAA,EACAJ,KAAAA,GAH2B,SAKNJ,EAAAA,EAAAA,IAAA,gBAA2B,CAAEK,OAAAA,IALvB,cAKvBd,EALuB,yBAMtBA,EAASe,MANa,2CAAH,wDASfG,EAAY,mCAAG,WAAM5B,GAAN,uFACHmB,EAAAA,EAAAA,IAAA,iBAAoBnB,IADjB,cACpBU,EADoB,yBAEnBA,EAASe,MAFU,2CAAH,sDAKZI,EAAe,mCAAG,WAAM7B,GAAN,uFACNmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,aADM,cACvBU,EADuB,yBAEtBA,EAASe,MAFa,2CAAH,sDAKfhB,EAAe,mCAAG,WAAMT,GAAN,uFACNmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,cADM,cACvBU,EADuB,yBAEtBA,EAASe,KAAKK,SAFQ,2CAAH,qD","sources":["components/Reviews/Reviews.js","components/Service/MovieAPI.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from '../Service/MovieAPI';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [, setError] = useState(null);\n  const [, setLoading] = useState(false);\n\n  useEffect(() => {\n    const Reviews = async () => {\n      setLoading(true);\n\n      try {\n        const response = await getMovieReviews(movieId);\n        setReviews(response);\n        setError(null);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    Reviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      {reviews && reviews.length > 0 ? (\n        <ul>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <h3>{review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No reviews available.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '7a96b7d3f2fd15994813e6eeb1d3cb9e';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nexport const getTrendingMovies = async ({ page }) => {\n  const params = {\n    page,\n  };\n  const response = await axios.get(`/trending/movie/day`, { params });\n  return response.data;\n};\n\nexport const getSearchMovies = async (query, page) => {\n  const params = {\n    query,\n    page,\n  };\n  const response = await axios.get(`/search/movie`, { params });\n  return response.data;\n};\n\nexport const getMovieInfo = async movieId => {\n  const response = await axios.get(`/movie/${movieId}`);\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/credits`);\n  return response.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews?`);\n  return response.data.results;\n};\n"],"names":["movieId","useParams","useState","reviews","setReviews","setError","setLoading","useEffect","Reviews","getMovieReviews","response","console","error","length","map","review","author","content","id","axios","api_key","language","getTrendingMovies","page","params","data","getSearchMovies","query","getMovieInfo","getMovieCredits","results"],"sourceRoot":""}